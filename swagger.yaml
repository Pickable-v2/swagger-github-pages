openapi: 3.0.1
info:
  title: EatPick API
  description: API 설명
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - jwtAuth: []
tags:
  - name: Friendship
    description: Friendship API
  - name: Member
    description: Member API
paths:
  /mypage/update:
    post:
      tags:
        - Member
      description: 회원정보 수정
      operationId: myPageUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/com.example.eatpick.auth.domain.dto.request.MyPageUpdateRequest
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.auth.domain.dto.response.MyPageUpdateResponse
  /member/sign-up:
    post:
      tags:
        - Member
      description: 회원가입
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/com.example.eatpick.auth.domain.dto.request.MemberRequest
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.auth.domain.dto.response.MemberResponse
  /member/sign-in:
    post:
      tags:
        - Member
      description: 로그인
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/com.example.eatpick.auth.domain.dto.request.SignInRequest
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.auth.domain.dto.response.SignInResponse
  /member/check-password:
    post:
      tags:
        - Member
      description: 비밀번호 확인
      operationId: checkPassword
      parameters:
        - name: loginPw
          in: query
          required: true
          schema:
            type: string
        - name: verifiedLoginPw
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /member/check-nickname:
    post:
      tags:
        - Member
      description: 닉네임 중복 확인
      operationId: checkNickname
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /member/check-loginId:
    post:
      tags:
        - Member
      description: 아이디 중복 확인
      operationId: checkLoginId
      parameters:
        - name: loginId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /friendship/add:
    post:
      tags:
        - Friendship
      description: 친구 추가
      operationId: addFriend
      parameters:
        - name: loginId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.friendship.domain.dto.FriendshipResponse
  /friendship/accept:
    post:
      tags:
        - Friendship
      description: 친구 추가 수락
      operationId: acceptFriend
      parameters:
        - name: friendshipId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.friendship.domain.dto.FriendshipResponse
  /friendship/search:
    get:
      tags:
        - Friendship
      description: 친구 아이디 검색
      operationId: search
      parameters:
        - name: loginId
          in: query
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/org.springdoc.core.converters.models.Pageable'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/org.springframework.data.domain.PageCom.example.eatpick.friendship.domain.dto.SearchResponse
  /friendship/friend-list:
    get:
      tags:
        - Friendship
      description: 친구 목록 조회
      operationId: getFriendInfo
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /friendship/friend-add-list:
    get:
      tags:
        - Friendship
      description: 친구 추가 목록 조회
      operationId: getWaitingFriendInfo
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /member/withdraw:
    delete:
      tags:
        - Member
      description: 회원탈퇴
      operationId: withdraw
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.auth.domain.dto.response.MemberResponse
  /friendship/cancel:
    delete:
      tags:
        - Friendship
      description: 친구 추가 취소
      operationId: cancelFriend
      parameters:
        - name: friendshipId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/com.example.eatpick.friendship.domain.dto.FriendshipResponse
components:
  schemas:
    com.example.eatpick.auth.domain.dto.request.MyPageUpdateRequest:
      type: object
      properties:
        nickname:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        age:
          type: integer
          format: int32
    com.example.eatpick.auth.domain.dto.response.MyPageUpdateResponse:
      type: object
      properties:
        nickname:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        age:
          type: integer
          format: int32
    com.example.eatpick.auth.domain.dto.request.MemberRequest:
      type: object
      properties:
        loginId:
          type: string
        loginPw:
          type: string
        verifiedLoginPw:
          type: string
        nickname:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        age:
          type: integer
          format: int32
        preferences:
          type: array
          items:
            type: string
            enum:
              - SPICY
              - SWEET
              - SALTY
              - SOUR
              - SAVORY
              - MILD
              - PLAIN
              - VEGAN
              - VEGETARIAN
              - SEAFOOD
              - MEAT_LOVER
              - DAIRY_FREE
              - GLUTEN_FREE
              - LOW_CARB
              - ORGANIC
              - TRADITIONAL
    com.example.eatpick.auth.domain.dto.response.MemberResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        loginId:
          type: string
        loginPw:
          type: string
        verifiedLoginPw:
          type: string
        nickname:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        role:
          type: string
          enum:
            - USER
            - ADMIN
        age:
          type: integer
          format: int32
        preferences:
          type: array
          items:
            type: string
            enum:
              - SPICY
              - SWEET
              - SALTY
              - SOUR
              - SAVORY
              - MILD
              - PLAIN
              - VEGAN
              - VEGETARIAN
              - SEAFOOD
              - MEAT_LOVER
              - DAIRY_FREE
              - GLUTEN_FREE
              - LOW_CARB
              - ORGANIC
              - TRADITIONAL
    com.example.eatpick.auth.domain.dto.request.SignInRequest:
      type: object
      properties:
        loginId:
          type: string
        loginPw:
          type: string
    com.example.eatpick.auth.domain.dto.response.SignInResponse:
      type: object
      properties:
        loginId:
          type: string
        loginPw:
          type: string
        grantType:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
    com.example.eatpick.friendship.domain.dto.FriendshipResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromMemberId:
          type: integer
          format: int64
        toMemberId:
          type: integer
          format: int64
        friendshipStatus:
          type: string
          enum:
            - ACCEPT
            - WAIT
    org.springdoc.core.converters.models.Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    com.example.eatpick.friendship.domain.dto.SearchResponse:
      type: object
      properties:
        loginId:
          type: string
        nickname:
          type: string
    org.springframework.data.domain.PageCom.example.eatpick.friendship.domain.dto.SearchResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: >-
              #/components/schemas/com.example.eatpick.friendship.domain.dto.SearchResponse
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
